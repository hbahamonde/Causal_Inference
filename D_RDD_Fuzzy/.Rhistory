plot(d$x, d$y,
col = c("steelblue", "darkred"),
pch= 20,
cex = 0.5,
xlim = c(-3, 3),
ylim = c(-3.5, 5),
xlab = "x",
ylab = "Y")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(fuzz)],
pch= 20,
cex = 0.5,
xlim = c(-3, 3),
ylim = c(-3.5, 5),
xlab = "x",
ylab = "Y")
c("steelblue", "darkred")[factor(fuzz)]
factor(fuzz)
plot(d$x, d$y,
col = c("steelblue", "darkred"),
pch= 20,
cex = 0.5,
xlim = c(-3, 3),
ylim = c(-3.5, 5),
xlab = "x",
ylab = "Y")
# generate some sample data
W <- runif(1000, -1, 1)
y <- 3 + 2 * W + 10 * (W>=0) + rnorm(1000)
# load the package 'rddtools'
library(rddtools)
# construct rdd_data
data <- rdd_data(y, W, cutpoint = 0)
# plot the sample data
plot(data,
col = "steelblue",
cex = 0.35,
xlab = "W",
ylab = "Y")
W <- runif(1000, -1, 1)
y <- 3 + 2 * W + 10 * (W>=0) + rnorm(1000)
library(rddtools)
install.packages("rddtools")
library(rddtools)
data <- rdd_data(y, W, cutpoint = 0)
plot(data,
col = "steelblue",
cex = 0.35,
xlab = "W",
ylab = "Y")
rdd_mod <- rdd_reg_lm(rdd_object = data,
slope = "same")
summary(rdd_mod)
ifelse(d$x <  corte, 0, 0.8)
cat("\014")
rm(list=ls())
dev.off();dev.off();
set.seed(1234) # semilla
library(MASS)
# Cocinar Datos Multivariados usando la funcion "mvrnorm" (multivariate random normal).
# Como es multivariada, tendremos mas de un vector (en este caso dos).
mu <- c(0, 0) # los promedios de ambos vectors
sigma <- matrix(c(1, 0.7, 0.7, 1), ncol = 2) # una matriz de varianza-covarianza
d <- as.data.frame(mvrnorm(2000, mu, sigma)) # creamos la base de datos
colnames(d) <- c("x", "y") # le cambiamos los nombres
corte = 0
d$z <- ifelse(d$x <  corte, 0, 0.8) # introducimos FUZZYNESS
# Si d$x < corte, z es 0 con un 100% de probabilidad.
d$z
table(d$z)
sapply(X = d$z, FUN = function(x) rbinom(1, 1, prob = x))
d$z
# Hasta ahora "d$z" es un vector de probabilidades (0, y .8).
table(d$z)
# RDD: Fuzzy
cat("\014")
rm(list=ls())
dev.off();dev.off();
set.seed(1234) # semilla
library(MASS)
# Cocinar Datos Multivariados usando la funcion "mvrnorm" (multivariate random normal).
# Como es multivariada, tendremos mas de un vector (en este caso dos).
mu <- c(0, 0) # los promedios de ambos vectors
sigma <- matrix(c(1, 0.7, 0.7, 1), ncol = 2) # una matriz de varianza-covarianza
d <- as.data.frame(mvrnorm(2000, mu, sigma)) # creamos la base de datos
colnames(d) <- c("x", "y") # le cambiamos los nombres
corte = 0
d$z <- ifelse(d$x <  corte, 0, 0.8) # introducimos FUZZYNESS
# Si d$x < corte, z es 0 con un 100% de probabilidad.
# Si d$x > corte, z es 1 con un 80% de probabilidad.
# "Compliance"!
# Hasta ahora "d$z" es un vector de probabilidades (0, y .8).
table(d$z)
# Metamos ese vector de prob's en una funcion para convertirlos en 0's y 1's
z <- sapply(X = d$z, FUN = function(x) rbinom(1, 1, prob = x))
z
# veamos como quedo
table(d$z)
# Metamos ese vector de prob's en una funcion para convertirlos en 0's y 1's
d$z <- sapply(X = d$z, FUN = function(x) rbinom(1, 1, prob = x))
# veamos como quedo
table(d$z)
# RDD: Fuzzy
cat("\014")
rm(list=ls())
dev.off();dev.off();
set.seed(1234) # semilla
library(MASS)
# Cocinar Datos Multivariados usando la funcion "mvrnorm" (multivariate random normal).
# Como es multivariada, tendremos mas de un vector (en este caso dos).
mu <- c(0, 0) # los promedios de ambos vectors
sigma <- matrix(c(1, 0.7, 0.7, 1), ncol = 2) # una matriz de varianza-covarianza
d <- as.data.frame(mvrnorm(2000, mu, sigma)) # creamos la base de datos
colnames(d) <- c("x", "y") # le cambiamos los nombres
corte = 0
d$z <- ifelse(d$x <  corte, 0, 0.8) # introducimos FUZZYNESS
# Si d$x < corte, z es 0 con un 100% de probabilidad.
# Si d$x > corte, z es 1 con un 80% de probabilidad.
# "Compliance"!
# Hasta ahora "d$z" es un vector de probabilidades (0, y .8).
table(d$z)
# Metamos ese vector de prob's en una funcion para convertirlos en 0's y 1's
d$z <- sapply(X = d$z, FUN = function(x) rbinom(1, 1, prob = x))
# veamos como quedo
table(d$z)
# Fabriquemos que el efecto de Z en Y es 2 (combinacion lineal)
d$y <- d$y + z * 2
# RDD: Fuzzy
cat("\014")
rm(list=ls())
dev.off();dev.off();
set.seed(1234) # semilla
library(MASS)
# Cocinar Datos Multivariados usando la funcion "mvrnorm" (multivariate random normal).
# Como es multivariada, tendremos mas de un vector (en este caso dos).
mu <- c(0, 0) # los promedios de ambos vectors
sigma <- matrix(c(1, 0.7, 0.7, 1), ncol = 2) # una matriz de varianza-covarianza
d <- as.data.frame(mvrnorm(2000, mu, sigma)) # creamos la base de datos
colnames(d) <- c("x", "y") # le cambiamos los nombres
corte = 0
d$z <- ifelse(d$x <  corte, 0, 0.8) # introducimos FUZZYNESS
# Si d$x < corte, z es 0 con un 100% de probabilidad.
# Si d$x > corte, z es 1 con un 80% de probabilidad.
# "Compliance"!
# Hasta ahora "d$z" es un vector de probabilidades (0, y .8).
table(d$z)
# Metamos ese vector de prob's en una funcion para convertirlos en 0's y 1's
d$z <- sapply(X = d$z, FUN = function(x) rbinom(1, 1, prob = x)) # funcion
# veamos como quedo
table(d$z)
# Fabriquemos que el efecto de Z en Y es 2 (combinacion lineal)
d$y <- d$y + z * 2
# Fabriquemos que el efecto de Z en Y es 2 (combinacion lineal)
d$y <- d$y + d$z * 2
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(fuzz)],
pch= 20,
cex = 0.5,
xlim = c(-3, 3),
ylim = c(-3.5, 5),
xlab = "x",
ylab = "Y")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],
pch= 20,
cex = 0.5,
xlim = c(-3, 3),
ylim = c(-3.5, 5),
xlab = "x",
ylab = "Y")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],
pch= 20,
cex = 0.5,
#xlim = c(-3, 3),
#ylim = c(-3.5, 5),
xlab = "x",
ylab = "y")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],
pch= 20,
#cex = 0.5,
#xlim = c(-3, 3),
#ylim = c(-3.5, 5),
xlab = "x",
ylab = "y")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],
pch= 20,
cex = 0.5, # tamano de los circulos
#xlim = c(-3, 3),
#ylim = c(-3.5, 5),
xlab = "x",
ylab = "y")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],
pch= 22,
cex = 0.5, # tamano de los circulos
#xlim = c(-3, 3),
#ylim = c(-3.5, 5),
xlab = "x",
ylab = "y")
factor(d$z)
c("steelblue", "darkred")[factor(d$z)]
plot(d$x, d$y,
#col = c("steelblue", "darkred")[factor(d$z)],  # color
pch= 20, # geometria de los circulos
cex = 0.5, # tamano de los circulos
#xlim = c(-3, 3),
#ylim = c(-3.5, 5),
xlab = "x",
ylab = "y")
plot(d$x, d$y,
col = c("steelblue", "darkred"),#[factor(d$z)],  # color
pch= 20, # geometria de los circulos
cex = 0.5, # tamano de los circulos
#xlim = c(-3, 3),
#ylim = c(-3.5, 5),
xlab = "x",
ylab = "y")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],  # color
pch= 20, # geometria de los circulos
cex = 0.5, # tamano de los circulos
#xlim = c(-3, 3),
#ylim = c(-3.5, 5),
xlab = "x",
ylab = "y")
library(rdd)
islamic <- read.csv("data/islamic_women.csv")
load(islamic)
data(islamic)
install.packages("UCLSPP")
library(haven)
regdata0 <- read_dta("~/Downloads/regdata0.dta")
View(regdata0)
colnames(regdata0)
cat("\014")
rm(list=ls())
dev.off();dev.off();
set.seed(1234) # semilla
library(MASS)
# Cocinar Datos Multivariados usando la funcion "mvrnorm" (multivariate random normal).
# Como es multivariada, tendremos mas de un vector (en este caso dos).
mu <- c(0, 0) # los promedios de ambos vectors
sigma <- matrix(c(1, 0.7, 0.7, 1), ncol = 2) # una matriz de varianza-covarianza
d <- as.data.frame(mvrnorm(2000, mu, sigma)) # creamos la base de datos
colnames(d) <- c("x", "y") # le cambiamos los nombres
corte = 0
d$z <- ifelse(d$x <  corte, 0, 0.8) # introducimos FUZZYNESS
# Si d$x < corte, z es 0 con un 100% de probabilidad.
# Si d$x > corte, z es 1 con un 80% de probabilidad.
# "Compliance"!
# Hasta ahora "d$z" es un vector de probabilidades (0, y .8).
table(d$z)
# Metamos ese vector de prob's en una funcion para convertirlos en 0's y 1's
d$z <- sapply(X = d$z, FUN = function(x) rbinom(1, 1, prob = x)) # funcion
# veamos como quedo
table(d$z)
# Fabriquemos que el efecto de Z en Y es 2 (combinacion lineal)
d$y <- d$y + d$z * 2
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],  # asignar color para z(1) y z(0)
pch= 20, # geometria de los circulos
cex = 0.5, # tamano de los circulos
xlab = "x",
ylab = "y")
abline(v = 0, lty = 2)
d$treatProb
# estimate the Fuzzy RDD
data <- rdd_data(d$y, d$x,
cutpoint = corte,
z = d$z)
library(rdd)
data <- rdd_data(d$y, d$x,
cutpoint = corte,
z = d$z)
# Estimar Fuzzy RDD
library(rddtools)
data <- rdd_data(d$y, d$x,
cutpoint = corte,
z = d$z)
data
# veamos
head(data)
rdd_reg_lm(rdd_object = data,
slope = "same")
# Estimar modelo fuzzy RDD
frdd_mod <- rdd_reg_lm(rdd_object = data,
slope = "same")
frdd_mod
summary(frdd_mod)
?rdd_reg_lm
plot(frdd_mod,
cex = 0.5,
lwd = 0.4,
xlim = c(-4, 4),
ylim = c(-3.5, 5),
xlab = "W",
ylab = "Y")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],  # asignar color para z(1) y z(0)
pch= 20, # geometria de los circulos
cex = 0.5, # tamano de los circulos
xlab = "x",
ylab = "y")
d$z
d$z
sapply(X = d$z, FUN = function(x) rbinom(1, 1, prob = x)) # funcion
ifelse(d$x <  corte, 0, 0.8)
summary(frdd_mod)
# veamos
head(data)
head(d)
d == data
table(d == data)
summary(frdd_mod)
frdd_mod
# Estimar modelo fuzzy RDD
rdd_reg_lm(rdd_object = data, slope = "same")
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],  # asignar color para z(1) y z(0)
pch= 20, # geometria de los circulos
cex = 0.5, # tamano de los circulos
xlab = "x",
ylab = "y")
band <- IKbandwidth(d$y, d$x)
band
band <- IKbandwidth(d$y, d$x)
d_rdd  <- d[d$y < band & d$y > -band, ]
linear_rdd_model <- lm(x ~ y + d_win, data=d_rdd)
summary(linear_rdd_model) # d_win es LATE
band <- IKbandwidth(d$y, d$x)
band
d_rdd  <- d[d$y < band & d$y > -band, ]
d_rdd
summary(d_rdd)
band <- IKbandwidth(d$x, d$y)
d_rdd  <- d[d$x < band & d$x > -band, ]
summary(d)
d_rdd
band
summary(d)
summary(d_rdd)
band
linear_rdd_model <- lm(y ~ x + d_win, data=d_rdd)
linear_rdd_model <- lm(y ~ x + z, data=d_rdd)
summary(linear_rdd_model) # d_win es LATE
mu <- c(0, 0) # los promedios de ambos vectors
sigma <- matrix(c(1, 0.7, 0.7, 1), ncol = 2) # una matriz de varianza-covarianza
d <- as.data.frame(mvrnorm(2000, mu, sigma)) # creamos la base de datos
colnames(d) <- c("x", "y") # le cambiamos los nombres
corte = 0
d$z <- ifelse(d$x <  corte, 0, 0.8) # introducimos FUZZYNESS
d$z
p_load(rdd)
band <- IKbandwidth(d$y, d$x)
islamic_rdd  <- islamic[islamic$margin < band & islamic$margin > -band, ]
band <- IKbandwidth(d$x, d$y)
d_rdd  <- d[d$x < band & d$x > -band, ] # corta la base: quedarse con los valores de x: 0.5 por lado
summary(d_rdd) # veamos la max y min de x de la nueva base datos cortada
linear_rdd_model <- lm(y ~ x + z, data=d_rdd)
summary(linear_rdd_model) # z es LATE
p_load(rdd)
band <- IKbandwidth(d$y, d$x)
islamic_rdd  <- islamic[islamic$margin < band & islamic$margin > -band, ]
band <- IKbandwidth(d$x, d$y)
d_rdd  <- d[d$x < band & d$x > -band, ] # corta la base: quedarse con los valores de x: 0.5 por lado
summary(d_rdd) # veamos la max y min de x de la nueva base datos cortada
linear_rdd_model <- lm(y ~ x + z, data=d_rdd)
summary(linear_rdd_model) # z es LATE
band <- IKbandwidth(d$x, d$y)
d_rdd  <- d[d$x < band & d$x > -band, ] # corta la base: quedarse con los valores de x: 0.5 por lado
summary(d_rdd) # veamos la max y min de x de la nueva base datos cortada
linear_rdd_model <- lm(y ~ x + z, data=d_rdd)
summary(linear_rdd_model) # z es LATE
qui()
quit()
quit("no")
?quit
quit(save = "no")
quit(save = "no")
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(knitr)
set.seed(2020)
options(scipen=9999999)
if (!require("pacman")) install.packages("pacman"); library(pacman)
mu <- c(0, 0) # los promedios de ambos vectores
sigma <- matrix(c(1, 0.7, 0.7, 1), ncol = 2) # una matriz de varianza-covarianza
p_load(MASS)
d <- as.data.frame(mvrnorm(2000, mu, sigma)) # creamos la base de datos
d
colnames(d) <- c("x", "y") # le cambiamos los nombres
head(d)
corte = 0 # definir el corte
corte
d$z <- ifelse(d$x <  corte, 0, 0.8) # introducimos FUZZYNESS
d$z
table(d$z)
d$z <- sapply(X = d$z, FUN = function(x) rbinom(1, 1, prob = x)) # funcion
head(d)
table(d$z)
d$y <- d$y + d$z * 2
table(d$z)
head(d)
plot(d$x, d$y,
col = c("steelblue", "darkred")[factor(d$z)],  # asignar color para z(1) y z(0)
pch= 20, # geometria de los circulos
cex = 0.5, # tamano de los circulos
xlab = "x",
ylab = "y")
# linea vertical
abline(v = 0, lty = 2)
data <- rdd_data(d$y, d$x,
cutpoint = corte,
z = d$z
)
###################################################
### code chunk number 8: chunk:7
###################################################
# Estimar Fuzzy RDD
p_load(rddtools)
data <- rdd_data(d$y, d$x,
cutpoint = corte,
z = d$z
)
head(data)
head(d)
rdd_reg_lm(rdd_object = data, slope = "same")
library(ggplot2)
options(scipen=999) # Apagar notacion cientifica
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() # Logeado
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() + geom_smooth(method="lm") # con linea
# 1. Que significa esta linea?
# Altamente customizable
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col="steelblue", size=3) + geom_smooth(method="lm") # Color azul
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=0.7) + geom_smooth(method="lm") # Color by state
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=1, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") # Forma del punto, segun estado.
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() #  Cambio de "tema de colores"
cat("\014")
rm(list=ls())
graphics.off()
library("dslabs")
library(ggplot2)
library(ggplot2)
data("heights")
head(heights)
ggplot(heights, aes(height, fill=sex))
ggplot(heights, aes(height, fill=sex)) + geom_density(alpha = 0.2)
objeto = ggplot(heights, aes(height, fill=sex))
objeto + geom_density(alpha = 0.2)
## Los datos van de 1987 hasta 1993.
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat") # R permite cargar bases de datos directamente de Internet.
souvenir
?ts
# Declarar que el objeto "souvenir" (que no es nada mas q una secuencia de numeros, es un objeto de series de tiempo.
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))
souvenirtimeseries
summary(souvenirtimeseries) # que tipo de objeto sera este?
is(souvenirtimeseries)
plot.ts(souvenirtimeseries) # El Y-axis esta en notacion cientifica. Apaguemosla subiendo el umbral, poniendo un numero arbitrariamente alto.
souvenir
plot.ts(souvenir)
plot.ts(souvenirtimeseries) # El Y-axis esta en notacion cientifica. Apaguemosla subiendo el umbral, poniendo un numero arbitrariamente alto.
library(ggplot2)
options(scipen=999)
head(midwest)
table(midwest$state)
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
table(midwest$state)
midwest$state
midwest$area
midwest$area
log(midwest$area)
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() # Logeado
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point() + geom_smooth(method="lm") # con linea
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col="steelblue", size=3) + geom_smooth(method="lm") # Color azul
# Altamente customizable
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(col="steelblue", size=0.1) + geom_smooth(method="lm") # Color azul
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=0.7) + geom_smooth(method="lm") # Color by state
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=1, alpha=0.5) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(col=state), size=1) + geom_smooth(method="lm") # Alpha
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") # Forma del punto, segun estado.
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() #  Cambio de "tema de colores"
ggplot(midwest, aes(x=log(area), y=log(poptotal))) + geom_point(aes(shape=state), colour = "red", size=3, alpha=0.5) + geom_smooth(method="lm") + theme_bw() + labs(title="Area y Poblacion", y="Poblacion (log)", x="Area (log)", caption="Base de datos 'Midwest'") # Cambio en los titulos de los ejes.
ggplot(midwest, aes(x=log(area))) +
geom_point(aes(y=log(poptotal)), colour = "red", size=3, alpha=0.5) +
geom_point(aes(y=log(percblack)), colour = "green", size=2, alpha=0.5) +
theme_bw() +
labs(title="Area y Población", y="Población", x="Área", caption="Base de datos 'Midwest'")
# instalar librerias (OJO: podemos cargamos varias al mismo tiempo, si lo hacemos escribiendo un vector "c" ).
install.packages(c("rgeos", "cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("rgeos", "cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
theme_set(theme_bw()) # seteamos el tema "black and white" para no tener ese fondo plomo que siempre tiene GGPLOT. Se ve mejor, mas limpio.
library("sf")
library("rnaturalearth") # libreria con todos los mapas del mundo
library("rnaturalearthdata") # libreria complementaria de "rnaturalearth"
world <- ne_countries(scale = "medium", returnclass = "sf")
head(world)
ggplot(data = world) + geom_sf()
# agreguemosle un poco de color...
ggplot(data = world) + geom_sf(color = "black", fill = "lightgreen") # pero esta coloracion no aporta mucha informacion...
ggplot(data = world) + geom_sf(aes(fill = pop_est))
# agreguemosle un poco de color...pero con algo mas de significado.
ggplot(data = world) + geom_sf(aes(fill = pop_est)) + scale_fill_viridis_c(option = "plasma", trans = "sqrt") # poblacion estimada.
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12))
world_points<- st_centroid(world) # declaremos los nombres de los paises segun coordenadas.
world_points # veamos...
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry))) # "column bind" (haciendo MERGE...nuestra base de datos con latitud/longitud, y otra base con "world_points", es decir, nombres de los paises)
ggplot(data = world) + geom_sf() + coord_sf(xlim = c(-84, -35), ylim = c(-55, 12)) + geom_text(data= world_points,aes(x=X, y=Y, label=name), color = "darkblue", fontface = "bold", check_overlap = FALSE)
